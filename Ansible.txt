Configuration Management
============================
This is the process of configuring servers from one point
of control

Advantages
==================
1 Provisioning of Servers
  Setup of s/w's on servers can be done very easily from one point

2 Reduction of usage of resources
  We require less amount of time,money and human resources to configure
  servers

3 Handling Snowflake servers
  After a point of time all servers in the data center behave like
  snowflake servers ie they might be running on slightly different
  h/w and s/w confurations.Configuaration Management tools can pick
  up this info in simple setup file which can be reused to setup
  similar environments

4 Disaster Recovery
  In case of disaster recovery where we can loose an entire data center
  we can recreate similar data center with greater ease

5 Idempotent
  Configuration Management tools are used to bring the servers to a
  specific state called as "desired state",If the rmeote server is 
  already in the desired state CM tools will not reconfigure that server

===========================================================================
Popular CM tools
======================
Ansible
Chef
Puppet
Saltstack
=========================================================================
Ansible is installed on one machine that is called as "Controller"
all the remaining servers that we want to configure are called
as "managed nodes/hosts"
Ansible uses "agentless" policy to configure the remote servers
ie we don't require any client side s/w of ansible to be present
on the managed nodes
Ansible uses "push" methodology to push the configuration changes
via passwordless ssh

=========================================================================
Setup of Ansible
=============================
1 Create 3-4 AWS ubuntu instances
2 Name the first one Controller and the remaining as MAnaged nodes
3 Establish passwordless ssh between Controller and managed nodes
  a) Connect to managed node
  b) Setup password of ubuntu user
     sudo passwd ubuntu
  c) Edit the sshd_config file
     sudo vim /etc/ssh/sshd_config
     Search for "PasswordAuthentication" and change it from no to yes
  d) Restart ssh
     sudo service ssh restart
  e) Connect to Controller
  f) Generate the ssh keys
     ssh-keygen
  g) Copy the public keys to authoried_keys on managed nodes
     ssh-copy-id ubuntu@private_ip_of_managednode

4 Install Ansible
  a) Update the apt repository
     sudo apt-get update
  b) Install softwares required for ansible
     sudo apt-get install software-properties-common
  c) Add the latest version of ansible to apt repository
     sudo apt-add-repository ppa:ansible/ansible
  d) Update the apt repository
     sudo apt-get update
  e) Install ansible
     sudo apt-get install -y ansible

Ansible uses a files known as "inventory" file to read info about 
the managed nodes,Here we should add the rmeote managed nodes
ipaddress

sudo vim /etc/ansible/hosts
Copy paste the private ip address of all managed nodes


=============================================================================
Day 2
=============================================================================
Modules in ansible
========================
1 command: This is used to ecxecute linux commands on the managed nodes
           This is the default module of Ansible

2 shell: This is used to execute shell scripts or python scripts on 
         the managed nodes.It is also used for running commands related
         to redirection and piping

3 ping: Used to chek if the remote servers are pingable or not

4 user: This is used to perform user administration on the remote
        servers like creating/deleting users,setting passwords,setting
        home directoires etc

5 copy: This is used to copy files and folders from the controller to 
        the managed nodes

6 fetch: This is used to copy files from the managed nodes to the controller

7 file: Used to create/delete files or directories on the managed nodes

8 apt: Used for s/w package management on the managed nodes like installing
       s/w's,deleting,upgrading etc.This works on ubuntu based machines

9 yum: Similar to apt but it works on Centos,Redhat linux etc

10 service: Used to start stop and restart services on the managed nodes

11 uri: Used to check if a url is reachable from the managed nodes

12 git: Used to perform git version controlling on the remote managed nodes

13 get_url: Used to download files from remote servers works like
             linux command wget

14 stat: Captures info about files and folders present on the managed nodes

15 debug: This is the print statement of ansible

16 include: Used to call child playbooks from the level of a parent playbook

17 replace: Used to change specific sections of the file 

18 pause: Used to pause the playbook execution for a specific period

19 docker_container: Used to handle docker containers on the managed nodes

20 docker_image: Used to handle docker images on the managed nodes

=========================================================================
Ansible perfrom remote configuration on servers in 3 ways
1 Adhoc commands
2 Playbooks
3 Roles

============================================================================
Adhoc commands
====================
Syntax of Adhoc commands
--------------------------------------
ansible all/ipaddress/group_name  -i path_of_inventory -m module_name 
                                                            -a '          ' 


Command Module
==================
Ansible command to see the memory information of all managed nodes
ansible all -i /etc/ansible/hosts -m command -a 'free m'

/etc/ansible/hosts is the default inventory file and when using it
we need not give -i
ansible all  -m command -a 'free m'

command module is the default module os ansible and we need not  use
-m option when working on command module
ansible all   -a 'free m'

====================================================================
Shell Module
-----------------
Ansible commands to downlaod the docker script and execute it to install docker
ansible all -m shell -a ' curl -fsSL https://get.docker.com -o get-docker.sh'

ansible all -m shell -a 'sh get-docker.sh'

--------------------------------------------------------------------------
Ansible command to capture memory statics into a file called as file1
ansible all -m shell -a 'free -m > file1'

=====================================================================
User Module
=================
Ansible command to create a user and assign a password
ansible all -m user -a 'name=sai password=intelliqit' -b

Ansible command to create a user,assign home dir,default shell
uid,comment etc
 ansible all -m user -a 'name=Anu password=intelliqit 
          home=/home/ubuntu/Anu uid=12345 shell=/bin/bash 
                                     comment="A normal user"' -b

================================================================================
Day 3
================================================================================
Ansible command to create file on all managed nodes
ansible all -m file -a 'name=/tmp/file1 state=touch'

state=touch    create files
state=directory creates directories
state=absent    delete files/directories



Ansible command to create file and also specify the owner,group owner
and permissions
ansible all -m file -a 'name=/tmp/file1 state=touch owner=sai 
                                                group=Anu mode=750' -b


===========================================================================
Ansible command to copy /etc/passwd file to all managed nodes
 ansible all -m copy -a 'src=/etc/passwd dest=/tmp'

Create a chain of directories on the controller and copy all that to
the managed nodes
mkdir -p d1/d2/d3/d4/d5
ansible all -m copy -a 'src=d1 dest=/home/ubuntu'

Copy module can also change the permissions,ownership and group ownership
of files that are copied
ansible all -m copy -a 'src=file1 dest=/tmp owner=root 
                                                  group=sai mode=700' -b

=========================================================================
Ansible command to install git on all managed nodes
ansible all -m apt -a 'name=git state=present' -b

state=present is for installation
state=absent is for uninstallation
state=latest  is for upgrading to a later version

To update the apt repository we can use
update_cache-yes
Ansible command to install tomcat9 after updating the apt repository
ansible all -m apt -a 'name=tomcat9 state=present update_cache=yes' -b

========================================================================
Service module
===================
Ansible command to restart tomcat on all managed nodes
 ansible all -m service -a 'name=tomcat9 state=restarted' -b

state=restarted is for restarting
state=stopped is for stopping
state=started is for starting 

========================================================================
Day 4
=========================================================================
git module
=================
Ansible command to download from a remote git repository
ansible all -m git -a 'repo=https://github.com/intelliqittrainings/maven.git dest=/tmp/mygit' -b

=============================================================================
get_url
==============
Ansible command to download jenkins.war into all managed nodes
 ansible all -m get_url -a 
       'url=https://get.jenkins.io/warstable/2.277.2/jenkins.war  dest=/tmp'


===============================================================================
Replace module
=====================
Ansible command to change the pot of tomcat from 8080 to 9090

ansible all -m replace -a 'regexp=8080 replace=9090 path=/etc/tomcat9/server.xml' -b
ansible all -m service -a 'name=tomcat9 state=restarted' -b


==============================================================================
uri module
====================
Ansible command to check if google.com is reachable from all managed nodes
ansible all -m uri -a 'url=http://google.com status_code=200'

------------------------------------------------------------------------------
Configure apache2 on all managed nodes
========================
1 Install apache2 on all managed nodes
  ansible all -m apt -a 'name=apache2 state=present' -b

2 Edit the index.html file
  ansible all -m copy -a 'content="Welcome to IntelliqIT"                                                             dest=/var/www/html/index.html' -b

3 Restart apache2
  ansible all -m service -a 'name=apache2 state=restarted' -b

4 Check the url response of apache2
  ansible all -m uri -a 'url=http://172.31.28.60 status_code=200'
  ansible all -m uri -a 'url=http://172.31.23.20 status_code=200'

=======================================================================
Configuring tomcat9
==========================
1 Install tomcat9
  ansible all -m apt -a 'name=tomcat9 state=present update_cache=yes' -b

2 Copy the tomcat-users.xml file
  ansible all -m copy -a 'src=tomcat-users.xml dest=/etc/tomcat9' -b

3 Change port of tomcat
  ansible all -m replace -a 'regexp=9090 replace=8080 
                                     path=/etc/tomcat9/server.xml' -b

4 Restart tomcat
  ansible all -m service -a 'name=tomcat9 state=restarted' -b 

5 Check the url reponse of tomcat
  ansible all -m uri -a 'url=http://172.31.28.60:8080 status_code=200' -b
  ansible all -m uri -a 'url=http://172.31.23.20:8080 status_code=200' -b



=======================================================================
Day 5
======================================================================
<intelliqit>
<trainers>
<devops>Sai</devops>
<aws>Sheshi</aws>
   </trainers>
   <coordinators>
        <devops>Shalini</devops>
        <aws>Shahida</aws>
   </coordinators>
</intelliqit>


---
intelliqit:
 trainers:
  devops:Sai
  aws: Sheshi
 coordinators:
  devops: Shalini
  aws: Shahida
...

===================================================================
============================================================================
Ansible Playbooks
========================
Adhoc commands become difficutl to handle when working on complex
configurations of s/w applications.
Each adhoc command can work only on one module and one set of
arguments.In such cases we can use Ansible playbooks which 
support greater reusability.
Playbooks are created using yaml and each playbook is a combination of
multiple plays.A play contains info about what module has to be 
executed.These plays are designed to work on a single host or a
group of hosts or all the hosts
====================================================================
Ansible playbook to create a user on all managed nodes
vim playbook1.yml
---
- name: Create a user
  hosts: all
  tasks:
   - name: User Creation
     user:
      name: Anu
      password: intelliqit
      uid: 1256
      home: /home/Anu
      shell: /bin/bash
      
...

To check if the playbook is syntactically correct
ansible-playbook playbook1.yml --syntax-check

To execute the playbook
ansible-playbook playbook1.yml -b

==============================================================
Ansible playbook for configuring apache2

vim playbook2.yml
---
- name: Configuring apache2
  hosts: all
  tasks:
   - name: Install apache2
     apt:
      name: apache2
      state: present
      update_cache: yes
   - name: Edit the index.html file
     copy:
      content: "IntelliqIT"
      dest: /var/www/html/index.html
   - name: Restart apache2
     service:
      name: apache2
      state: restarted
   - name: Check apache response on server1
     uri:
      url: http://172.31.23.20
      status_code: 200
   - name: Check apache response on server2
     uri:
      url: http://172.31.28.60
      status_code: 200
...

==================================================================
Ansible playbook for configuring tomcat9

vim playbook3.yml
---
- name: Configuring tomcat
  hosts: all
  tasks:
   - name: Install tomcat9
     apt:
      name: tomcat9
      state: present
   - name: Copy the tomcat-users.xml file
     copy:
      src: tomcat-users.xml
      dest: /etc/tomcat9
   - name: Change port of tomcat from 8080 to 9090
     replace:
      regexp: 8080
      replace: 9090
      path: /etc/tomcat9/server.xml
   - name: Restart tomcat9
     service:
      name: tomcat9
      state: restarted
   - name: Pause for 5 min
     pause:
      minutes: 5
   - name: Check url response of tomcat on server1
     uri:
      url: http://172.31.28.60:9090
      status_code: 200
   - name: Check url response of tomcat on server2
     uri:
      url: http://172.31.23.20:9090
      status_code: 200
...


=======================================================================
Ansible playbook to copy file from one managed node to another
vim playbook4.yml
---
- name: Fetch file from server1 to controller
  hosts: 172.31.23.20
  tasks:
   - name: Fetch file
     fetch:
      src: file2
      dest: /tmp
- name: Copy file to server2
  hosts: 172.31.28.60
  tasks:
   - name: Copy file
     copy:
      src: /tmp/172.31.23.20/file2
      dest: /home/ubuntu
...


=============================================================================
Day 6
=============================================================================
==============================================================
Variables in Ansible
========================
Ansible uses three types of variables
1 Global Scope variabels
2 Host Scope Variables
3 Play Scope Varibales

Global Scope Variables
============================
These variables are passed from the command prompt using "--extra-vars"
and they have the highest priority

Ansible playbook to install or uninstall s/w applications
vim playbook5.yml
---
- name: Install s/w packages using variables
  hosts: all
  tasks:
   - name: Install/Uninstall
     apt:
      name: "{{a}}"
      state: "{{b}}"
      update_cache: "{{c}}"
...

To run the playbook for installing tree
ansible-playbook  playbook5.yml --extra-vars "a=tree b=present c=no" -b

We can use the same playbook to uninstall git
ansible-playbook  playbook5.yml --extra-vars "a=git b=absent c=no" -b

===========================================================================
vim playbook6.yml
---
- name: Create users and create files/dirs in the user home dir
  hosts: all
  tasks:
   - name: Create user
     user:
      name: "{{a}}"
      password: "{{b}}"
      home: "{{c}}"
   - name: Create files/dirs in users home dir
     file:
      name: "{{d}}"
      state: "{{e}}"
...

To create users from the above playbook
ansible-playbook playbook6.yml --extra-vars "a=Ramesh b=intelliqit                             c=/home/Ramesh d=/home/Ramesh/file1 e=touch" -b

ansible-playbook playbook6.yml --extra-vars "a=Radha b=intelliqit                           c=/home/ubuntu/Radha d=/home/ubuntu/Radha/dir1 e=directory" -b

========================================================================
Playscope Variables
=======================
These variables are defined in the playbook in the "vars" section and
they have the least priority
vim playbook7.yml
---
- name: Install some s/w applications
  hosts: all
  vars:
   - a: tomcat9
   - b: present
   - c: yes
  tasks:
   - name: Install/uninstall
     apt:
      name: "{{a}}"
      state: "{{b}}"
      update_cache: "{{c}}"
...

The above playbook works like a template whose default behaviour is
to install tomcat9 but we can use the same playbook and make it
work on some other s/w application
ansible-playbook playbook7.yml  --extra-vars "a=tree" -b

=========================================================================
Day 7
=========================================================================

Host Scope variables
============================
These variables are classified into 2 type
1 Variables to work on a group of hosts
2 Variables to work on a single host

Variables to work on a group of hosts
=============================================
These variables are created ina folder called group_vars
This folder should be created in the location where the playbooks
are present and in the group_vars we create a file whose name is
same as group name from inventory file

1 Move into the folder where the playbooks are present
  cd path_of_playbooks_folder

2 Create a folder group_vars and move into it
  mkdir group_vars
  cd group_vars

3 Create a file whose name is same as some group name in inventory file
  vim webserver
  ---
  a: firewalld
  b: present
  c: yes
  ...

4 Move back to the playbooks folder
  cd ..

5 Create a playbook  to use the above varibales
  vim playbook8.yml
---
- name: Install firewall using host scope variables
  hosts: webserver
  tasks:
   - name: Install firewalld
     apt:
      name: "{{a}}"
      state: "{{b}}"
      update_cache: "{{c}}"
 
6 To execute the playbook
  ansible-playbook playbook8.yml -b

===============================================================
Variable to work on a single host
======================================
These variables are created in host_vars folder and this folder
should be created in the fodler where the playbooks are present
In this folder create a file whose name is ipaddress of one managed
node

1 Move into the playbooks folder
  cd path_of_playbooks_folder

2 Create a folder called host_vars and move into it
  mkdir host_vars
  cd host_vars

3 Create file whose name is same as ipaddress of one managed node
  vim 172.31.95.178 
  ---
  a: Radha
  b: intelliqit
  c: /home/Radha
  d: /bin/bash

4 Move back to the playbooks folder
  cd ..

5 Create aplybook to use the above varibales
  vim playbook9.yml
---
- name: User create uisng hsot scope varibales
  hosts: 172.31.95.178
  tasks:
   - name: USer creation
     user:
      name: "{{a}}"
      password: "{{b}}"
      home: "{{c}}"
      shell: "{{d}}"
...

6 To execute the playbook
  ansible-playbook playbook9.yml -b

==================================================================
Day 7
===================================================================
Loops
==============
Loops can be implemented in ansible using with_items,with_sequence

Ansible playbook to install multiple s/w applications
vim playbook10.yml
---
- name: Install s/w applications
  hosts: all
  tasks:
   - name: Install s/w
     apt:
      name: "{{item}}"
      state: present
      update_cache: no
     with_items:
      - tree
      - git
      - maven
...

Alternate ways of writing the above playbook
vim playbook11.yml
---
- name: Install s/w applications
  hosts: all
  tasks:
   - name: Install s/w
     apt:
      name: ['git','tree','maven']
      state: present
      update_cache: no
...

===================================================================
Ansible playbook to install,uninstall,update multiple s/w applications
vim playbook12.yml
---
- name: Install s/w applications
  hosts: all
  tasks:
   - name: Install s/w
     apt:
      name: "{{item.a}}"
      state: "{{item.b}}"
      update_cache: "{{item.c}}"
     with_items:
      - {a: tree,b: present,c: no}
      - {a: git,b: absent,c: no}
      - {a: maven,b: latest,c: yes}
...

=========================================================================
vim playbook13.yml
---
- name: Creating multiple users and copying files/dirs into users home dir
  hosts: all
  tasks:
   - name: Create multiple users
     user:
      name: "{{item.a}}"
      password: "{{item.b}}"
      home: "{{item.c}}"
     with_items:
      - {a: Harish,b: intelliqit,c: /home/Harish}
      - {a: Smaran,b: intelliqit,c: /home/Smaran}
   - name: Copy files into users home dirs
     copy:
      src: "{{item.a}}"
      dest: "{{item.b}}"
     with_items:
      - {a: /etc/passwd,b: /home/Harish}
      - {a: /etc/group,b: /home/Smaran}
...

========================================================================
vim playbook14.yml
---
- name: Configuring apache2
  hosts: all
  tasks:
   - name: Install apache2
     apt:
      name: apache2
      state: present
      update_cache: yes
   - name: Edit the index.html file
     copy:
      content: "Intelliqit"
      dest: /var/www/html/index.html
   - name: Restart apache2
     service:
      name: apache2
      state: restarted
   - name: Check url response of apache2 on all servers
     uri:
      url: "{{item}}"
      status_code: 200
     with_items:
      - http://172.31.95.178
      - http://172.31.88.236
...

===========================================================================
When conditions in ansible
=============================
These are used to run playbook based on a specific condition

vim playbook15.yml
---
- name: Implementing when conditions
  hosts: all
  become: yes
  vars:
   - a: 20
  tasks:
   - name: Download git repo
     git:
      repo: https://github.com/intelliqittrainings/maven.git
      dest: /tmp/git/
     when: a == 200

================================================================================
Day 8
===============================================================================
vim playbokk16.yml
---
- name: Check if a file is present and if not create a directory with same name
  hosts: all
  tasks:
   - name: Check for the file
     stat:
      path: /tmp/f1
     register: a
   - name: Display out of the above modules
     debug:
      var: a
   - name: Create a directory called f1
     file:
      name: /tmp/f1
      state: directory
     when: a.stat.exists == false

===========================================================================
vim playbook17.yml
---
- name: Capture info about a file and if it in non executable delete it
  hosts: all
  tasks:
   - name: Capture info about file77
     stat:
      path: /home/ubuntu/file77
     register: a
   - name: Display output of above module
     debug:
      var: a
   - name: delete if file is executable
     file:
      name: /home/ubuntu/file77
      state: absent
     when: a.stat.executable == false

===========================================================================
Handlers
=======================
1 Handlers are modules that are executed if some other module 
  is executed successfully and it has made some changes

2 Handlers are executed only after all the tasks are executed

3 Handlers are executed in the order that they are mentioned 
  in the handlers section and not in the order that they are
  called in the tasks section

4 Even if a handler is called multiple times in the task section
  it will be executed only once

vim playbook18.yml
---
- name: Handlers in ansible
  hosts: all
  tasks:
   - name: Install apache2
     apt:
      name: apache2
      state: present
     notify: Check url response
   - name: Edit index.html file
     copy:
      content: "Welcome to my IntelliQIT"
      dest: /var/www/html/index.html
     notify: Restart apache2
  handlers:
   - name: Restart apache2
     service:
      name: apache2
      state: restarted
   - name: Check url response
     uri:
      url: "{{item}}"
      status_code: 200
     with_items:
      - http://172.31.88.236
      - http://172.31.95.178
...

=========================================================================
Error Handling in ansible
==============================
If we want the ansbile playbook to continue its execution
even if a specific module fails then we can use Error Handling

The section of code that might fail is given in the "block" section
If it fails the control goes to the "rescue" section,"always"
section is executed everytime

vim playbook19.yml
---
- name: Setup tomcat
  hosts: all
  tasks:
   - block:
      - name: Install tomcat8
        apt:
         name: tomcat8
         state: present
         update_cache: yes
     rescue:
      - name: Install tomcat9
        apt:
         name: tomcat9
         state: present
         update_cache: yes
     always:
      - name: Display output
        debug:
         msg: "Tomcat setup successfull"

==========================================================================










https://gitlab.com/intelliq/newplaybooks



















